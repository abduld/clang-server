version: 2
executorType: docker

containerInfo:
  - image: golang:1.8

stages:
  build:
    workDir: /go/src/github.com/zchee/clang-server
    environment:
      CIRCLE_PROJECT_USERNAME: zchee
      CIRCLE_PROJECT_REPONAME: clang-server
      LLVM_VERSION: 3.9
    steps:
      - type: checkout
      - type: shell
        name: "Install LLVM toolchain"
        command: |
          set -eu
          echo "deb http://apt.llvm.org/jessie/ llvm-toolchain-jessie-${LLVM_VERSION} main" >> /etc/apt/sources.list
          wget -O - http://apt.llvm.org/llvm-snapshot.gpg.key | apt-key add -
          apt-get update
          apt-get install -y --no-install-recommends clang-${LLVM_VERSION} libclang-common-${LLVM_VERSION}-dev libclang-${LLVM_VERSION}-dev libclang1-${LLVM_VERSION} libclang1-${LLVM_VERSION}-dbg libllvm${LLVM_VERSION} libllvm${LLVM_VERSION}-dbg lldb-${LLVM_VERSION} llvm-${LLVM_VERSION} llvm-${LLVM_VERSION}-dev llvm-${LLVM_VERSION}-runtime lldb-${LLVM_VERSION} liblldb-${LLVM_VERSION}-dbg
          ln -s /usr/bin/clang-${LLVM_VERSION} /usr/bin/clang
          ln -s /usr/bin/clang++-${LLVM_VERSION} /usr/bin/clang++
      - type: shell
        name: "Install jstemmer/go-junit-report"
        command: |
          go get github.com/jstemmer/go-junit-report
          mkdir -p /tmp/test-results
      - type: shell
        name: "go test -v -x -race -cover ..."
        environment:
          COVER_MODE: atomic
          COVERAGE_OUT: coverage.tmp.out
          COVERAGE_RESULT: coverage.out
          CC: clang
          CXX: clang++
          CGO_LDFLAGS: -L/usr/lib/llvm-$LLVM_VERSION/lib
        command: |
          set -eu
          echo "mode: $COVER_MODE" > $COVERAGE_RESULT
          for pkg in $(go list ./... | grep -v vendor); do
            go test -v -race -cover -covermode=$COVER_MODE -coverprofile=$COVERAGE_OUT $pkg | go-junit-report > /tmp/test-results/$(basename $pkg).xml
            if [ -f $COVERAGE_OUT ]; then
              tail -n +2 $COVERAGE_OUT >> $COVERAGE_RESULT
              rm -f $COVERAGE_OUT
            fi
          done
      - type: shell
        name: "Uploading reports to codecov.io"
        command: |
          set -eu
          bash <(curl -s https://codecov.io/bash)
      - type: shell
        name: "gofmt, golint and go vet"
        command: |
          set -eu
          go get -u github.com/golang/lint/golint
          test -z "$(gofmt -e -s -l -w $(find . -not -iwholename '*vendor*' -and -name '*.go' -print) | tee /dev/stderr)"
          for pkg in $(go list ./... | grep -v -e vendor -e internal)
            do golint -set_exit_status $pkg
          done
          go vet $(go list ./... | grep -v vendor)
      - type: test-results-store
        path: /tmp/test-results
