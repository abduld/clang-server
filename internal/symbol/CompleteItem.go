// automatically generated by the FlatBuffers compiler, do not modify

package symbol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// CompleteItem represents a vim complete-items dictionary.
type CompleteItem struct {
	_tab flatbuffers.Table
}

func GetRootAsCompleteItem(buf []byte, offset flatbuffers.UOffsetT) *CompleteItem {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &CompleteItem{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *CompleteItem) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *CompleteItem) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *CompleteItem) Word() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CompleteItem) Abbr() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CompleteItem) Menu() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CompleteItem) Info() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CompleteItem) Kind() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *CompleteItem) Icase() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(14))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CompleteItem) MutateIcase(n byte) bool {
	return rcv._tab.MutateByteSlot(14, n)
}

func (rcv *CompleteItem) Dup() byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(16))
	if o != 0 {
		return rcv._tab.GetByte(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *CompleteItem) MutateDup(n byte) bool {
	return rcv._tab.MutateByteSlot(16, n)
}

func CompleteItemStart(builder *flatbuffers.Builder) {
	builder.StartObject(7)
}
func CompleteItemAddWord(builder *flatbuffers.Builder, Word flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Word), 0)
}
func CompleteItemAddAbbr(builder *flatbuffers.Builder, Abbr flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(Abbr), 0)
}
func CompleteItemAddMenu(builder *flatbuffers.Builder, Menu flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(Menu), 0)
}
func CompleteItemAddInfo(builder *flatbuffers.Builder, Info flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(Info), 0)
}
func CompleteItemAddKind(builder *flatbuffers.Builder, Kind flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(Kind), 0)
}
func CompleteItemAddIcase(builder *flatbuffers.Builder, Icase byte) {
	builder.PrependByteSlot(5, Icase, 0)
}
func CompleteItemAddDup(builder *flatbuffers.Builder, Dup byte) {
	builder.PrependByteSlot(6, Dup, 0)
}
func CompleteItemEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
