// Copyright 2016 The clang-server Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

namespace internal.symbol;

// ----------------------------------------------------------------------------

/// File represents a particular source file that part of a project.
table File {
  /// Name name of file.
  Name: string (required, key); // -> []byte

  /// Flags compiled flags of file.
  Flags: [string]; // -> [][]byte

  /// TranslationUnit libclang translation unit data of file.
  TranslationUnit: string; // -> []byte

  /// Symbols symbol database of file.
  Symbols: [Info];

  /// Headers headers of file.
  Headers: [Header];

  // Includes includes of file.
  Includes: [string]; // -> [][]byte
}

/// Info symbol of C/C++ source.
table Info {
  /// ID hashed clang.Cursor.USR.
  ID: string (id: 0, required, key); // -> []byte

  /// Decls locations of declaration.
  Decls: [Location] (id: 1);

  /// Definition location of definition.
  Def: Location (id: 2);

  /// Callers caller of functions.
  Callers: [Caller] (id: 3);
}

/// Headers header files of parse file.
table Header {
  FileID: string (id: 0, required, key); // -> []byte
  Mtime: long (id: 1); // time.Time.Unix(): int64
}

/// Caller location of caller function.
table Caller {
  Location: Location (required);
  FuncCall: bool; // -> byte
}

/// Location location of the symbol.
table Location {
  /// FileName full filename of symbol position.
  FileName: string (required); // -> []byte

  /// Line line number of symbol location.
  Line: uint;    // clang.SourceLocation.Line: uint32

  /// Col column number of symbol location.
  Col: uint = 0; // clang.SourceLocation.Col: uint32

  /// Offset byte offset of symbol location.
  Offset: uint;  // clang.SourceLocation.Offset: uint32

  /// USR Unified Symbol Resolution of cursor.
  USR: string; // -> []byte
}

/// CompleteItem represents a vim complete-items dictionary.
table CompleteItem {
  Word: string (required); // -> []byte
  Abbr: string; // -> []byte
  Menu: string; // -> []byte
  Info: string; // -> []byte
  Kind: string; // -> []byte
  Icase: bool; // -> byte
  Dup: bool; // -> byte
}

/// CodeCompleteResults represents a list of vim complete-items dictionary.
table CodeCompleteResults {
  Results: [CompleteItem];
}

rpc_service Clang {
  Completion(Location):CodeCompleteResults (streaming: "none");
}

// ----------------------------------------------------------------------------

root_type File;

// -*-mode:cpp-*-
