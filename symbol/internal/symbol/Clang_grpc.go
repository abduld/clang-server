//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: schema

package symbol

import (
	flatbuffers "github.com/google/flatbuffers/go"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// ClangClient API for Clang service
type ClangClient interface {
	Completion(ctx context.Context, opts ...grpc.CallOption) (Clang_CompletionClient, error)
}

type clangClient struct {
	cc *grpc.ClientConn
}

func NewClangClient(cc *grpc.ClientConn) ClangClient {
	return &clangClient{cc}
}

func (c *clangClient) Completion(ctx context.Context, opts ...grpc.CallOption) (Clang_CompletionClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Clang_serviceDesc.Streams[0], c.cc, "/symbol.Clang/Completion", opts...)
	if err != nil {
		return nil, err
	}
	x := &clangCompletionClient{stream}
	return x, nil
}

type Clang_CompletionClient interface {
	Send(*flatbuffers.Builder) error
	Recv() (*File, error)
	grpc.ClientStream
}

type clangCompletionClient struct {
	grpc.ClientStream
}

func (x *clangCompletionClient) Send(m *flatbuffers.Builder) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clangCompletionClient) Recv() (*File, error) {
	m := new(File)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClangServer API for Clang service
type ClangServer interface {
	Completion(Clang_CompletionServer) error
}

func RegisterClangServer(s *grpc.Server, srv ClangServer) {
	s.RegisterService(&_Clang_serviceDesc, srv)
}

func _Clang_Completion_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClangServer).Completion(&clangCompletionServer{stream})
}

type Clang_CompletionServer interface {
	Send(*flatbuffers.Builder) error
	Recv() (*Location, error)
	grpc.ServerStream
}

type clangCompletionServer struct {
	grpc.ServerStream
}

func (x *clangCompletionServer) Send(m *flatbuffers.Builder) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clangCompletionServer) Recv() (*Location, error) {
	m := new(Location)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Clang_serviceDesc = grpc.ServiceDesc{
	ServiceName: "symbol.Clang",
	HandlerType: (*ClangServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Completion",
			Handler:       _Clang_Completion_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
