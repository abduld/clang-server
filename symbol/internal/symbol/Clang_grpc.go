//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: schema

package symbol

import (
	flatbuffers "github.com/google/flatbuffers/go"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// ClangClient API for Clang service
type ClangClient interface {
	Completion(ctx context.Context, in *flatbuffers.Builder, opts ...grpc.CallOption) (*File, error)
}

type clangClient struct {
	cc *grpc.ClientConn
}

func NewClangClient(cc *grpc.ClientConn) ClangClient {
	return &clangClient{cc}
}

func (c *clangClient) Completion(ctx context.Context, in *flatbuffers.Builder, opts ...grpc.CallOption) (*File, error) {
	out := new(File)
	err := grpc.Invoke(ctx, "/symbol.Clang/Completion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClangServer API for Clang service
type ClangServer interface {
	Completion(context.Context, *Location) (*flatbuffers.Builder, error)
}

func RegisterClangServer(s *grpc.Server, srv ClangServer) {
	s.RegisterService(&_Clang_serviceDesc, srv)
}

func _Clang_Completion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Location)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClangServer).Completion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/symbol.Clang/Completion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClangServer).Completion(ctx, req.(*Location))
	}
	return interceptor(ctx, in, info, handler)
}

var _Clang_serviceDesc = grpc.ServiceDesc{
	ServiceName: "symbol.Clang",
	HandlerType: (*ClangServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Completion",
			Handler:    _Clang_Completion_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
