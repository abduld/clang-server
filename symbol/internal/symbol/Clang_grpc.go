//Generated by gRPC Go plugin
//If you make any local changes, they will be lost
//source: symbol

package symbol

import (
	flatbuffers "github.com/google/flatbuffers/go"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// ClangClient API for Clang service
type ClangClient interface {
	Store(ctx context.Context, opts ...grpc.CallOption) (Clang_StoreClient, error)
	Retrieve(ctx context.Context, opts ...grpc.CallOption) (Clang_RetrieveClient, error)
}

type clangClient struct {
	cc *grpc.ClientConn
}

func NewClangClient(cc *grpc.ClientConn) ClangClient {
	return &clangClient{cc}
}

func (c *clangClient) Store(ctx context.Context, opts ...grpc.CallOption) (Clang_StoreClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Clang_serviceDesc.Streams[0], c.cc, "/symbol.Clang/Store", opts...)
	if err != nil {
		return nil, err
	}
	x := &clangStoreClient{stream}
	return x, nil
}

type Clang_StoreClient interface {
	Send(*flatbuffers.Builder) error
	Recv() (*Location, error)
	grpc.ClientStream
}

type clangStoreClient struct {
	grpc.ClientStream
}

func (x *clangStoreClient) Send(m *flatbuffers.Builder) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clangStoreClient) Recv() (*Location, error) {
	m := new(Location)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *clangClient) Retrieve(ctx context.Context, opts ...grpc.CallOption) (Clang_RetrieveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Clang_serviceDesc.Streams[1], c.cc, "/symbol.Clang/Retrieve", opts...)
	if err != nil {
		return nil, err
	}
	x := &clangRetrieveClient{stream}
	return x, nil
}

type Clang_RetrieveClient interface {
	Send(*flatbuffers.Builder) error
	Recv() (*SymbolDatabase, error)
	grpc.ClientStream
}

type clangRetrieveClient struct {
	grpc.ClientStream
}

func (x *clangRetrieveClient) Send(m *flatbuffers.Builder) error {
	return x.ClientStream.SendMsg(m)
}

func (x *clangRetrieveClient) Recv() (*SymbolDatabase, error) {
	m := new(SymbolDatabase)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ClangServer API for Clang service
type ClangServer interface {
	Store(Clang_StoreServer) error
	Retrieve(Clang_RetrieveServer) error
}

func RegisterClangServer(s *grpc.Server, srv ClangServer) {
	s.RegisterService(&_Clang_serviceDesc, srv)
}

func _Clang_Store_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClangServer).Store(&clangStoreServer{stream})
}

type Clang_StoreServer interface {
	Send(*flatbuffers.Builder) error
	Recv() (*SymbolDatabase, error)
	grpc.ServerStream
}

type clangStoreServer struct {
	grpc.ServerStream
}

func (x *clangStoreServer) Send(m *flatbuffers.Builder) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clangStoreServer) Recv() (*SymbolDatabase, error) {
	m := new(SymbolDatabase)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Clang_Retrieve_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ClangServer).Retrieve(&clangRetrieveServer{stream})
}

type Clang_RetrieveServer interface {
	Send(*flatbuffers.Builder) error
	Recv() (*Location, error)
	grpc.ServerStream
}

type clangRetrieveServer struct {
	grpc.ServerStream
}

func (x *clangRetrieveServer) Send(m *flatbuffers.Builder) error {
	return x.ServerStream.SendMsg(m)
}

func (x *clangRetrieveServer) Recv() (*Location, error) {
	m := new(Location)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Clang_serviceDesc = grpc.ServiceDesc{
	ServiceName: "symbol.Clang",
	HandlerType: (*ClangServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Store",
			Handler:       _Clang_Store_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Retrieve",
			Handler:       _Clang_Retrieve_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}
