// automatically generated by the FlatBuffers compiler, do not modify

package symbol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// Symbol symbol of C/C++ sources.
type Symbol struct {
	_tab flatbuffers.Table
}

func GetRootAsSymbol(buf []byte, offset flatbuffers.UOffsetT) *Symbol {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Symbol{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *Symbol) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Symbol) Table() flatbuffers.Table {
	return rcv._tab
}

/// ID hashed clang.Cursor.USR.
func (rcv *Symbol) ID() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

/// ID hashed clang.Cursor.USR.
/// Definition location of definition.
func (rcv *Symbol) Definition(obj *Location) *Location {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Indirect(o + rcv._tab.Pos)
		if obj == nil {
			obj = new(Location)
		}
		obj.Init(rcv._tab.Bytes, x)
		return obj
	}
	return nil
}

/// Definition location of definition.
/// Decls locations of declaration.
func (rcv *Symbol) Decls(obj *Location, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Symbol) DeclsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Decls locations of declaration.
/// Callers caller of functions.
func (rcv *Symbol) Callers(obj *Caller, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *Symbol) CallersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

/// Callers caller of functions.
func SymbolStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SymbolAddID(builder *flatbuffers.Builder, ID flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(ID), 0)
}
func SymbolAddDefinition(builder *flatbuffers.Builder, Definition flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(Definition), 0)
}
func SymbolAddDecls(builder *flatbuffers.Builder, Decls flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(Decls), 0)
}
func SymbolStartDeclsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SymbolAddCallers(builder *flatbuffers.Builder, Callers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(Callers), 0)
}
func SymbolStartCallersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SymbolEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
