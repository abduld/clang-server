// automatically generated by the FlatBuffers compiler, do not modify

package symbol

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

/// SymbolDatabase translationunit of file.
type SymbolDatabase struct {
	_tab flatbuffers.Table
}

func GetRootAsSymbolDatabase(buf []byte, offset flatbuffers.UOffsetT) *SymbolDatabase {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &SymbolDatabase{}
	x.Init(buf, n+offset)
	return x
}

func (rcv *SymbolDatabase) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *SymbolDatabase) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *SymbolDatabase) Symbols(obj *Symbol, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SymbolDatabase) SymbolsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SymbolDatabase) Headers(obj *Header, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *SymbolDatabase) HeadersLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SymbolDatabase) Includes(j int) []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		a := rcv._tab.Vector(o)
		return rcv._tab.ByteVector(a + flatbuffers.UOffsetT(j*4))
	}
	return nil
}

func (rcv *SymbolDatabase) IncludesLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *SymbolDatabase) Mtime() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *SymbolDatabase) MutateMtime(n int64) bool {
	return rcv._tab.MutateInt64Slot(10, n)
}

func SymbolDatabaseStart(builder *flatbuffers.Builder) {
	builder.StartObject(4)
}
func SymbolDatabaseAddSymbols(builder *flatbuffers.Builder, Symbols flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(Symbols), 0)
}
func SymbolDatabaseStartSymbolsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SymbolDatabaseAddHeaders(builder *flatbuffers.Builder, Headers flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(Headers), 0)
}
func SymbolDatabaseStartHeadersVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SymbolDatabaseAddIncludes(builder *flatbuffers.Builder, Includes flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(2, flatbuffers.UOffsetT(Includes), 0)
}
func SymbolDatabaseStartIncludesVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func SymbolDatabaseAddMtime(builder *flatbuffers.Builder, Mtime int64) {
	builder.PrependInt64Slot(3, Mtime, 0)
}
func SymbolDatabaseEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
